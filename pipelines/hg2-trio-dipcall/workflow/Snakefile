from pathlib import Path
import re

src_dir = Path("resources")
src_asm_dir = src_dir / "asm"

res_dir = Path("results")
res_asm_dir = res_dir / "asm"
res_dip_dir = res_dir / "dipcall" / "{parent}"


def verkko_url(wildcards):
    hap = wildcards.verkko_hap
    if hap == "pat":
        return "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v0.9.pat_X_EBV_MT.fasta"
    elif hap == "mat":
        return "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v0.9.mat_Y_EBV_MT.fasta"
    else:
        assert False, "Petrucci is not impressed with your fingers (wrong hap)"


def verkko_hap(parent):
    if parent in ["hg3", "hg2_pat", "hg2_pat_verkko"]:
        return "pat"
    elif parent in ["hg4", "hg2_mat", "hg2_mat_verkko"]:
        return "mat"
    else:
        assert False, "Even Guido can type better than you (wrong parent)"


def dipcall_parent_asm(hap, parent):
    if parent in ["hg2_pat_verkko", "hg2_mat_verkko"]:
        return expand(rules.download_verkko_asm.output, verkko_hap=hap)
    elif parent in ["hg2_pat", "hg2_mat"]:
        p = "hg2"
    elif parent == "hg3":
        p = "hg3"
    elif parent == "hg4":
        p = "hg4"
    else:
        assert False, "This sounds like LOLCODE (wrong parent)"
    return expand(
        rules.laboriously_obtain_hifiasm_asms.output,
        hifiasm_hap=hap,
        parent=p,
    )


rule download_verkko_asm:
    output:
        src_asm_dir / "verkko" / "{verkko_hap}_verkko.fa",
    params:
        url=verkko_url,
    shell:
        "curl -Ss -q -L -o {output} {params.url}"


rule index_verkko_asm:
    input:
        rules.download_verkko_asm.output,
    output:
        rules.download_verkko_asm.output[0] + ".fai",
    conda:
        "envs/dipcall.yml"
    shell:
        "samtools faidx {input} > {output}"


# NOTE: the hifi asms are on google drive and need to be downloaded manually
# HG2 hap1: https://drive.google.com/file/d/1RCbl4soA5QCCm9LSdxiZDpe5y9qWnPS0/view
# HG2 hap2: https://drive.google.com/file/d/14HNGcS2IMNYplOBRI06fRqcE2cjr214q/view
# HG3 hap1: https://drive.google.com/file/d/1qvrmf68uJ5VAesKNB_jdfmXuudCZd0Ys/view
# HG3 hap2: https://drive.google.com/file/d/1Jhc_erBgPVYapG4kPQt7LWJKIu4iagdk/view
# HG4 hap1: https://drive.google.com/file/d/1qgJf0LhjumYIp6XTzxL8OnjobwcQvDBd/view
# HG4 hap2: https://drive.google.com/file/d/1-gpix77eg7F9wFYRDS1ndD_oMwhxEYsB/view
rule laboriously_obtain_hifiasm_asms:
    output:
        src_asm_dir / "parents" / "{parent}" / "{hifiasm_hap}.fa.gz",


# TODO nuke all the makefiles before running this; dipcall will try too hard
# to be smart since it uses make, but snakemake doesn't know this is happening :(
rule run_dipcall:
    input:
        unpack(
            lambda w: {
                **{
                    k: expand(path, verkko_hap=verkko_hap(w.parent))
                    for k, path in [
                        ("ref", rules.download_verkko_asm.output),
                        ("ref_idx", rules.index_verkko_asm.output),
                    ]
                },
                **{
                    k: dipcall_parent_asm(h, w.parent)
                    for k, h in [("h1", "pat"), ("h2", "mat")]
                },
            }
        ),
    output:
        vcf=res_dip_dir / "hg2.dip.vcf.gz",
        bam1=res_dip_dir / "hg2.hap1.bam",
        bam2=res_dip_dir / "hg2.hap2.bam",
        pair=res_dip_dir / "hg2.pair.vcf.gz",
        make=res_dip_dir / "hg2.dip.mak",
    conda:
        "envs/dipcall.yml"
    params:
        prefix=lambda _, output: re.sub("\.dip.*", "", output.make),
    log:
        res_dip_dir / "dip.log",
    threads: 20
    resources:
        mem_mb=256000,
    shell:
        """
        run-dipcall \
            -z 200000,10000 \
            -t 5 \
            {params.prefix} \
            {input.ref} \
            {input.h1} \
            {input.h2} \
            > {output.make}

        make -j4 -f {output.make}
        """


# dipcall apparently doesn't fully work unless the chromosome names are like "chr[XY0-9]"
# (these have "_MATERNAL" or something after them). So fix it here (which is basically just
# the last step in the dipcall makefile
rule fix_dipcall_vcf:
    input:
        rules.run_dipcall.output.pair,
    output:
        res_dip_dir / "hg2.fixed.vcf.gz",
    conda:
        "envs/dipcall.yml"
    shell:
        """
       gunzip -c {input} | \
       sed 's/^\(chr[^_]\+\)_[^\t]*\t/\\1\t/' | \
       dipcall-aux.js vcfpair - | \
       bgzip -c \
       > {output}
       """


rule index_output_vcfs:
    input:
        vcf=rules.fix_dipcall_vcf.output,
        pair=rules.run_dipcall.output.pair,
    output:
        vcf=rules.fix_dipcall_vcf.output[0] + ".tbi",
        pair=rules.run_dipcall.output.pair + ".tbi",
    conda:
        "envs/dipcall.yml"
    shell:
        """
        tabix {input.vcf}
        tabix {input.pair}
        """


rule index_output_bams:
    input:
        bam1=rules.run_dipcall.output.bam1,
        bam2=rules.run_dipcall.output.bam2,
    output:
        bai1=rules.run_dipcall.output.bam1 + ".bai",
        bai2=rules.run_dipcall.output.bam2 + ".bai",
    conda:
        "envs/dipcall.yml"
    shell:
        """
        samtools index {input.bam1}
        samtools index {input.bam2}
        """


###
# analysis

analysis_dir = res_dip_dir / "analysis_hap{parent_idx}"

PAT_ELEMENT = "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/polishing/HG002/v0.9/variants/deepvariant/element_2x150/hg002v0.9.pat.X.EBV.element_2x150.vcf.gz"
MAT_ELEMENT = "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/polishing/HG002/v0.9/variants/deepvariant/element_2x150/hg002v0.9.mat.Y.EBV.element_2x150.vcf.gz"

def element_url(parent):
    if parent == "hg3":
        return PAT_ELEMENT
    if parent == "hg4":
        return MAT_ELEMENT
    assert False, "you are a master of dada"


use rule download_verkko_asm as download_element with:
    output:
        src_dir / "element" / "{parent}.vcf.gz",
    params:
        url=lambda w: element_url(w.parent)
    localrule: True


rule index_element:
    input:
        rules.download_element.output,
    output:
        rules.download_element.output[0] + ".tbi",
    localrule: True
    conda:
        "envs/analysis.yml"
    shell:
        """
        tabix {input}
        """


# Get long stretches in the paired vcf from each parent. Note that the
# columns seem inverted because 1/1 is variant and we are finding not-variant
# (ie inherited) which can either be ./. or 0/0 (which is more work, and nobody
# likes work)
rule get_inherited_regions:
    input:
        rules.run_dipcall.output.pair,
    output:
        analysis_dir / "pair_hap{parent_idx}_inherited.bed",
    # 1 = pat, 2 = mat
    params:
        column=lambda w: 11 if int(w.parent_idx) == 1 else 10,
    conda:
        "envs/analysis.yml"
    localrule: True
    shell:
        """
        gunzip -c {input} | \
        awk '{{FS=OFS="\t"}}
             {{if(${params.column} ~ /^1\/1/) print $1, $2-1,$2+length($4)}}' | \
        mergeBed -i stdin -d 10000 | \
        awk '$3-$2>20000' | \
        mergeBed -i stdin -d 100000 | \
        awk '$3-$2>200000' | \
        mergeBed -i stdin -d 1000000 | \
        awk '$3-$2>1000000' | \
        mergeBed -i stdin -d 7000000 \
        > {output}
        """


def invert_parent_idx(parent_idx):
    if int(parent_idx) == 1:
        return 2
    elif int(parent_idx) == 2:
        return 1
    else:
        assert False, "you need more monkeys and typewriters"


# Get anti-intersection of each region file; overlaps are ambiguous, and we
# care about variants for which we can make a definitive statement about its
# inherited origin
rule subtract_inherited_regions:
    input:
        primary=rules.get_inherited_regions.output,
        secondary=lambda w: expand(
            rules.get_inherited_regions.output,
            allow_missing=True,
            parent_idx=invert_parent_idx(w.parent_idx),
        ),
    output:
        analysis_dir / "pair_hap{parent_idx}_inherited_clean.bed",
    localrule: True
    conda:
        "envs/analysis.yml"
    shell:
        """
        subtractBed -a {input.primary} -b {input.secondary} > {output}
        """


def gt_to_cmd(parent, parent_idx, gt):
    if parent == "hg3":
        pair_match=".."
    elif parent == "hg4":
        pair_match=""
    else:
        assert False, "I'm running out of silly things to say"

    if parent_idx == 1:
        gt_col=11
    elif parent_idx == 2:
        gt_col=12
    else:
        assert False, "I'm running out of more silly things to say"

    if gt == "01":
        return f"($10 ~ /^0\/1/ && ${gt_col} ~ /^1\/1/  && !($13 ~ /^{pair_match}1/))"
    elif gt == "12":
        return (
            "($10 ~ /^1\/2/ && "
            f"((${gt_col} ~ /^1\/1/ && !($13 ~ /^{pair_match}1/)) || "
            f"(${gt_col} ~ /^2\/2/ && !($13 ~ /^{pair_match}2/))))"
        )
    else:
        assert False, "in your world, 2 + 2 = flamboyant refrigerator...try again"


def pick_parent_idx(parent_idx, first, second):
    i = int(parent_idx)
    if i == 1:
        return first
    elif i == 2:
        return second
    else:
        assert False, "your keystrokes could inspire a Zappa composition"


def parent_to_bam(parent_idx):
    return pick_parent_idx(
        parent_idx, 
        rules.run_dipcall.output.bam1,
        rules.run_dipcall.output.bam2,
    )


def get_prefix(parent_idx):
    return pick_parent_idx(parent_idx, "PATERNAL", "MATERNAL")


# add this prefix to make consistent with current HG2 asms
rule append_chr_fixed:
    input:
        rules.fix_dipcall_vcf.output,
    output:
        analysis_dir / "fixed_appended.vcf.gz",
    params:
        suffix=lambda w: get_prefix(w.parent_idx)
    localrule: True
    conda:
        "envs/analysis.yml"
    shell:
        """
        gunzip -c {input} | \
        awk '{{FS=OFS="\t"}}
             {{if(!($1 ~ /^#/)) $1=$1"_{params.suffix}"; print}}' | \
        bgzip -c > {output}
        """


rule index_appended:
    input:
        rules.append_chr_fixed.output,
    output:
        rules.append_chr_fixed.output[0] + ".tbi",
    localrule: True
    conda:
        "envs/analysis.yml"
    shell:
        """
        tabix {input}
        """


rule merge_element:
    input:
        element=rules.download_element.output,
        pair=rules.run_dipcall.output.pair,
        fixed_pair=rules.append_chr_fixed.output,
        _idx=rules.index_appended.output,
        _idx_ele=rules.index_element.output,
    output:
        analysis_dir / "pair.element_hap{parent_idx}.vcf",
    conda:
        "envs/analysis.yml"
    shell:
        """
        bcftools merge {input.element} {input.pair} {input.fixed_pair} \
        --force-samples \
        > {output}
        """


rule get_element_inherited:
    input:
        asm=lambda w: expand(
            rules.download_verkko_asm.output,
            verkko_hap=verkko_hap(w.parent),
        ),
        bam=lambda w: parent_to_bam(int(w.parent_idx)),
        element=rules.merge_element.output,
        inherited=rules.subtract_inherited_regions.output,
    output:
        res_dir / "final_inh_analysis" / "{parent}_v_hg2_element_het{gt}_hap{parent_idx}_inherited.vcf",
    params:
        awk_cmd=lambda w: gt_to_cmd(w.parent, int(w.parent_idx), w.gt),
    conda:
        "envs/analysis.yml"
    shell:
        """
        intersectBed -a {input.element} -b {input.inherited} -header | \
        awk '$1 ~ /^#/ || {params.awk_cmd}' | \
        bcftools view -s {input.bam} --trim-alt-alleles | \
        bcftools norm -f {input.asm} \
        > {output}
        """


rule all:
    localrule: True
    input:
        expand(
            rules.index_output_vcfs.output + rules.index_output_bams.output,
            parent=[
                "hg3",
                "hg4",
                "hg2_pat",
                "hg2_mat",
                "hg2_pat_verkko",
                "hg2_mat_verkko",
            ],
        ),
        expand(
            rules.get_element_inherited.output,
            parent=["hg3", "hg4"],
            parent_idx=[1, 2],
            gt=["01", "12"],
        ),
