from pathlib import Path
import re

src_dir = Path("resources")
src_asm_dir = src_dir / "asm"

res_dir = Path("results")
res_asm_dir = res_dir / "asm"
res_dip_dir = res_dir / "dipcall" / "{parent}"


def verkko_url(wildcards):
    hap = wildcards.verkko_hap
    if hap == "pat":
        return "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/polishing/HG002/v0.7/v0.7.pat_X_EBV_MT.fasta"
    elif hap == "mat":
        return "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/polishing/HG002/v0.7/v0.7.mat_Y_EBV_MT.fasta"
    else:
        assert False, "Petrucci is not impressed with your fingers (wrong hap)"


def verkko_hap(parent):
    if parent in ["hg3", "hg2_pat", "hg2_pat_verkko"]:
        return "pat"
    elif parent in ["hg4", "hg2_mat", "hg2_mat_verkko"]:
        return "mat"
    else:
        assert False, "Even Guido can type better than you (wrong parent)"


def dipcall_parent_asm(hap, parent):
    if parent in ["hg2_pat_verkko", "hg2_mat_verkko"]:
        return expand(rules.download_verkko_asm.output, verkko_hap=hap)
    elif parent in ["hg2_pat", "hg2_mat"]:
        p = "hg2"
    elif parent == "hg3":
        p = "hg3"
    elif parent == "hg4":
        p = "hg4"
    else:
        assert False, "This sounds like LOLCODE (wrong parent)"
    return expand(
        rules.laboriously_obtain_hifiasm_asms.output,
        hifiasm_hap=hap,
        parent=p,
    )


rule download_verkko_asm:
    output:
        src_asm_dir / "verkko" / "{verkko_hap}_verkko.fa",
    params:
        url=verkko_url,
    shell:
        "curl -Ss -q -L -o {output} {params.url}"


rule index_verkko_asm:
    input:
        rules.download_verkko_asm.output,
    output:
        rules.download_verkko_asm.output[0] + ".fai",
    conda:
        "envs/dipcall.yml"
    shell:
        "samtools faidx {input} > {output}"


# NOTE: the hifi asms are on google drive and need to be downloaded manually
# HG2 hap1: https://drive.google.com/file/d/1RCbl4soA5QCCm9LSdxiZDpe5y9qWnPS0/view
# HG2 hap2: https://drive.google.com/file/d/14HNGcS2IMNYplOBRI06fRqcE2cjr214q/view
# HG3 hap1: https://drive.google.com/file/d/1qvrmf68uJ5VAesKNB_jdfmXuudCZd0Ys/view
# HG3 hap2: https://drive.google.com/file/d/1Jhc_erBgPVYapG4kPQt7LWJKIu4iagdk/view
# HG4 hap1: https://drive.google.com/file/d/1qgJf0LhjumYIp6XTzxL8OnjobwcQvDBd/view
# HG4 hap2: https://drive.google.com/file/d/1-gpix77eg7F9wFYRDS1ndD_oMwhxEYsB/view
rule laboriously_obtain_hifiasm_asms:
    output:
        src_asm_dir / "parents" / "{parent}" / "{hifiasm_hap}.fa.gz",


rule run_dipcall:
    input:
        unpack(
            lambda w: {
                **{
                    k: expand(path, verkko_hap=verkko_hap(w.parent))
                    for k, path in [
                        ("ref", rules.download_verkko_asm.output),
                        ("ref_idx", rules.index_verkko_asm.output),
                    ]
                },
                **{
                    k: dipcall_parent_asm(h, w.parent)
                    for k, h in [("h1", "pat"), ("h2", "mat")]
                },
            }
        ),
    output:
        vcf=res_dip_dir / "hg2.dip.vcf.gz",
        bam1=res_dip_dir / "hg2.hap1.bam",
        bam2=res_dip_dir / "hg2.hap2.bam",
        pair=res_dip_dir / "hg2.pair.vcf.gz",
        make=res_dip_dir / "hg2.dip.mak",
    conda:
        "envs/dipcall.yml"
    params:
        prefix=lambda _, output: re.sub("\.dip.*", "", output.make),
    log:
        res_dip_dir / "dip.log",
    threads: 20
    resources:
        mem_mb=256000,
    shell:
        """
        run-dipcall \
            -z 200000,10000 \
            -t 5 \
            {params.prefix} \
            {input.ref} \
            {input.h1} \
            {input.h2} \
            > {output.make}

        make -j4 -f {output.make}
        """


# dipcall apparently doesn't fully work unless the chromosome names are like "chr[XY0-9]"
# (these have "_MATERNAL" or something after them). So fix it here (which is basically just
# the last step in the dipcall makefile
rule fix_dipcall_vcf:
    input:
        rules.run_dipcall.output.pair,
    output:
        res_dip_dir / "hg2.fixed.vcf.gz",
    conda:
        "envs/dipcall.yml"
    shell:
        """
       gunzip -c {input} | \
       sed 's/^\(chr[^_]\+\)_[^\t]*\t/\\1\t/' | \
       dipcall-aux.js vcfpair - | \
       bgzip -c \
       > {output}
       """


rule index_output_vcfs:
    input:
        vcf=rules.fix_dipcall_vcf.output,
        pair=rules.run_dipcall.output.pair,
    output:
        vcf=rules.fix_dipcall_vcf.output[0] + ".tbi",
        pair=rules.run_dipcall.output.pair + ".tbi",
    conda:
        "envs/dipcall.yml"
    shell:
        """
        tabix {input.vcf}
        tabix {input.pair}
        """


rule index_output_bams:
    input:
        bam1=rules.run_dipcall.output.bam1,
        bam2=rules.run_dipcall.output.bam2,
    output:
        bai1=rules.run_dipcall.output.bam1 + ".bai",
        bai2=rules.run_dipcall.output.bam2 + ".bai",
    conda:
        "envs/dipcall.yml"
    shell:
        """
        samtools index {input.bam1}
        samtools index {input.bam2}
        """


rule all:
    input:
        expand(
            rules.index_output_vcfs.output +
            rules.index_output_bams.output,
            parent=[
                "hg3",
                "hg4",
                "hg2_pat",
                "hg2_mat",
                "hg2_pat_verkko",
                "hg2_mat_verkko",
            ],
        ),
