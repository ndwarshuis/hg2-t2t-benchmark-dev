import re
from os.path import dirname

conf = {
    "GRCh38": {
        "ref": "https://giab-data.s3.amazonaws.com/giab-test-data/GRCh38_GIABv3_no_alt_analysis_set_maskedGRC_decoys_MAP2K3_KMT2C_KCNJ18.fasta.gz",
        "query_vcf": {
            "comparison": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/PacBio_HiFi-Revio_20231031/pacbio-wgs-wdl_germline_20231031/HG002.GRCh38.deepvariant.phased.vcf.gz",
            "ont_old": "http://www.bio8.cs.hku.hk/clair3/analysis_result/ont_guppy4/2_coverage_subsampling/clair/hg003_40x_clair_filter_q748.vcf.gz",
            "ont_new": "http://www.bio8.cs.hku.hk/clair3/analysis_result/ont_guppy5/2_coverage_subsampling/clair3/hg003_40x_clair3.vcf.gz",
        },
        "bench": {
            "asm": {
                "vcf": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/NIST_HG002_DraftBenchmark_defrabbV0.015-20240215/GRCh38_HG2-T2TQ100-V1.0.vcf.gz",
                "bed": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/NIST_HG002_DraftBenchmark_defrabbV0.015-20240215/GRCh38_HG2-T2TQ100-V1.0_smvar.benchmark.bed",
            },
        },
        "strats": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.3/genome-stratifications-GRCh38@all.tar.gz",
    },
    # this is the ref that these pesky ont files use, and it has ambiguous characters which will make happy quite unhappy if we proceed with the "normal" one from above
    "GRCh38_ambiguous": {
        "ref": "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz",
        "query_vcf": {
            "ont_old": "http://www.bio8.cs.hku.hk/clair3/analysis_result/ont_guppy4/2_coverage_subsampling/clair/hg003_40x_clair_filter_q748.vcf.gz",
            "ont_new": "http://www.bio8.cs.hku.hk/clair3/analysis_result/ont_guppy5/2_coverage_subsampling/clair3/hg003_40x_clair3.vcf.gz",
        },
        "bench": {
            "v4": {
                "vcf": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG003_NA24149_father/NISTv4.2.1/GRCh38/HG003_GRCh38_1_22_v4.2.1_benchmark.vcf.gz",
                "bed": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG003_NA24149_father/NISTv4.2.1/GRCh38/HG003_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed"
            },
        },
        "strats": "notused",
    },
    "GRCh37": {
        "ref": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/references/GRCh37/hs37d5.fa.gz",
        "query_vcf": {
            "comparison": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/PacBio_HiFi-Revio_20231031/pacbio-wgs-wdl_germline_20231031/HG002.GRCh37.deepvariant.phased.vcf.gz",
        },
        "bench": {
            "asm": {
                "vcf": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/NIST_HG002_DraftBenchmark_defrabbV0.015-20240215/GRCh37_HG2-T2TQ100-V1.0.vcf.gz",
                "bed": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/NIST_HG002_DraftBenchmark_defrabbV0.015-20240215/GRCh37_HG2-T2TQ100-V1.0_smvar.benchmark.bed",
            },
        },
        "strats": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.3/genome-stratifications-GRCh37@all.tar.gz",
    },
    "CHM13": {
        "ref": "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/analysis_set/chm13v2.0.fa.gz",
        "query_vcf": {
            "comparison": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/PacBio_HiFi-Revio_20231031/pacbio-wgs-wdl_germline_20231031/HG002.CHM13.deepvariant.phased.vcf.gz",
        },
        "bench": {
            "asm": {
                "vcf": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/NIST_HG002_DraftBenchmark_defrabbV0.015-20240215/CHM13v2.0_HG2-T2TQ100-V1.0.vcf.gz",
                "bed": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/NIST_HG002_DraftBenchmark_defrabbV0.015-20240215/CHM13v2.0_HG2-T2TQ100-V1.0_smvar.benchmark.bed",
            },
        },
        "strats": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.3/genome-stratifications-CHM13@all.tar.gz",
    }
}


rule download_ref:
    output:
        "resources/{ref}/ref.fa.gz",
    params:
        url=lambda w: conf[w.ref]["ref"],
    shell:
        """
        curl -SsqLf {params.url} > {output}
        """


use rule download_ref as download_bench_vcf with:
    output:
        "resources/{ref}/{bench}/bench.vcf.gz",
    params:
        url=lambda w: conf[w.ref]["bench"][w.bench]["vcf"],


use rule download_ref as download_bench_bed with:
    output:
        "resources/{ref}/{bench}/bench.bed",
    params:
        url=lambda w: conf[w.ref]["bench"][w.bench]["bed"],


use rule download_ref as download_query_vcf with:
    output:
        "resources/{ref}/{experiment}/query.vcf.gz",
    params:
        url=lambda w: conf[w.ref]["query_vcf"][w.experiment],


use rule download_ref as download_strats with:
    output:
        "resources/{ref}/strats.tar.gz",
    params:
        url=lambda w: conf[w.ref]["strats"],


rule download_non_syntenic:
    output:
        "resources/non_syntenic.bed"
    params:
        url="https://hgdownload.soe.ucsc.edu/gbdb/hs1/hgUnique/hgUnique.hg38.bb",
    conda:
        "envs/bedtools.yml"
    shell:
        "bigBedToBed {params.url} {output}"    


rule unzip_ref:
    input:
        rules.download_ref.output,
    output:
        "results/{ref}/ref.fa"
    shell:
        """
        gunzip -c {input} > {output}
        """


rule index_ref:
    input:
        rules.unzip_ref.output,
    output:
        rules.unzip_ref.output[0] + ".fai",
    conda:
        "envs/samtools.yml"
    shell:
        """
        samtools faidx {input}
        """


rule get_genome:
    input:
        rules.index_ref.output,
    output:
        "results/{ref}/genome.txt"
    shell:
        """
        cut -f1,3 {input} > {output}
        """


rule unzip_strats:
    input:
        rules.download_strats.output,
    output:
        "results/{ref}/strats/{ref}-all-stratifications.tsv"
    params:
        dir=lambda _, output: dirname(output[0]),
    shell:
        """
        mkdir -p {params.dir} &&
        tar xzf {input} --directory {params.dir} --strip-components=1
        """


rule get_syntenic:
    input:
        bed=rules.download_non_syntenic.output,
        genome=expand(rules.get_genome.output, ref = "CHM13")
    output:
        "resources/syntenic.bed"
    conda:
        "envs/bedtools.yml"
    shell:
        """
        complementBed {input.bed} -g {input.genome} > {output}
        """

    
def inputs_for_happiness(wildcards):
    exp = wildcards.experiment
    bench = "v4" if exp.startswith("ont") else "asm"

    ins = {
        "_idx": rules.index_ref.output,
        "ref": rules.unzip_ref.output,
        "bench_bed": expand(
            rules.download_bench_bed.output,
            allow_missing = True,
            bench = bench,
        ),
        "bench_vcf": expand(
            rules.download_bench_vcf.output,
            allow_missing = True,
            bench = bench,
        ),
        "strats": expand(
            rules.unzip_strats.output,
            ref = re.match("^([^_]+)_?.*$", wildcards.ref)[1]
        )
    }

    def go(_exp, more):
        ins["query_vcf"] = expand(
            rules.download_query_vcf.output,
            ref = wildcards.ref,
            experiment = _exp,
        )
        return {**ins, **more}

    if exp == "non_syntenic":
        return go("comparison", {"targets": rules.download_non_syntenic.output})
    elif exp == "syntenic":
        return go("comparison", {"targets": rules.get_syntenic.output})
    else:
        return go(exp, {})



def extra_params(wildcards, input):
    return "-T " + input.targets[0] if wildcards.experiment == "non_syntenic" else ""
    

rule run_happy:
    input:
        unpack(inputs_for_happiness),
    output:
        "results/{ref}/{experiment}/happy/happy.extended.csv",
    params:
        prefix=lambda _, output: str(output[0]).replace(".extended.csv", ""),
        extra=extra_params,
    conda:
        "envs/happy.yml"
    log:
        "log/{ref}/{experiment}/happy/happy.log",
    threads: 8
    resources:
        mem_mb=64000,
    shell:
        """
        HGREF={input.ref} \
        hap.py \
        --engine vcfeval \
        --verbose \
        --threads {threads} \
        --stratification {input.strats} \
        {params.extra} \
        -f {input.bench_bed} \
        -o {params.prefix} \
        {input.bench_vcf} {input.query_vcf} \
        > {log} 2>&1
        """


rule make_happy_plot:
    input:
        comparison=expand(
            rules.run_happy.output,
            ref = ["GRCh38", "GRCh37", "CHM13"],
            experiment = "comparison"
        ),
        ont=expand(
            rules.run_happy.output,
            ref = ["GRCh38_ambiguous"],
            experiment = ["ont_new", "ont_old"],
        ),
        nonsyn=expand(
            rules.run_happy.output,
            ref = ["CHM13"],
            experiment = ["non_syntenic", "syntenic"]
        ),
    output:
        comparison="results/final/comparison_summary.pdf",
        not_comparison="results/final/not_comparison_summary.pdf",
        ont="results/final/ont_summary.pdf",
        nonsyn="results/final/nonsyn_summary.pdf",
    conda:
        "envs/rmarkdown.yml"
    script:
        "scripts/pretty_fig.R"


rule all:
    input:
        rules.make_happy_plot.output,
