from pathlib import Path
import re

src_dir = Path("resources")
src_asm_dir = src_dir / "asm"

res_dir = Path("results")
res_asm_dir = res_dir / "asm"
res_dip_dir = res_dir / "dipcall"


HAPLOTYPES = ["pat", "mat"]


# not compressed :(
rule download_hg2_asm:
    output:
        src_dir / "asm" / "hg2.fa.gz",
    params:
        url="https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/scratch/HG002/assemblies/drafts/assembly.v0.7.fasta",
    conda:
        "envs/dipcall.yml"
    shell:
        "curl -Ss -q -L {params.url} | bgzip -c > {output}"


rule download_ref:
    output:
        src_dir / "references" / "GRCh38.fa.gz",
    params:
        url="https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/references/GRCh38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fasta.gz",
    shell:
        "curl -Ss -q -L -o {output} {params.url}"


rule unzip_ref:
    input:
        rules.download_ref.output,
    output:
        res_asm_dir / "ref.fa",
    conda:
        "envs/dipcall.yml"
    shell:
        "samtools faidx {input} chr21 > {output}"


# rule unzip_ref:
#     input:
#         rules.download_ref.output,
#     output:
#         res_asm_dir / "ref.fa",
#     shell:
#         "gunzip -c {input} > {output}"


rule download_PAR:
    output:
        src_dir / "references" / "hg38_par.bed",
    params:
        url="https://github.com/lh3/dipcall/blob/master/data/hs38.PAR.bed",
    shell:
        "curl -Ss -q -L -o {output} {params.url}"


rule list_asm_chrs:
    input:
        rules.download_hg2_asm.output,
    output:
        res_asm_dir / "chrs.txt",
    shell:
        "gunzip -c {input} | grep -E '(MAT|PAT)' | sed 's/>//' > {output}"


rule filter_asm:
    input:
        fa=rules.download_hg2_asm.output,
        regions=rules.list_asm_chrs.output,
    output:
        res_asm_dir / "{hap}.fa.gz",
    conda:
        "envs/dipcall.yml"
    params:
        HAP=lambda wildcards: wildcards.hap.upper(),
    shell:
        """
        samtools faidx {input.fa} \
        $(grep {params.HAP} {input.regions} | grep chr21 | tr '\n' ' ') | \
        bgzip -c \
        > {output}
        """


rule index_ref:
    input:
        rules.unzip_ref.output,
    output:
        rules.unzip_ref.output[0] + ".fai",
    conda:
        "envs/dipcall.yml"
    shell:
        """
        samtools faidx {input}
        """


# TODO add par for HG2 (https://github.com/lh3/dipcall/blob/master/data/hs38.PAR.bed)
rule run_dipcall:
    input:
        **{h: expand(rules.filter_asm.output, hap=h) for h in HAPLOTYPES},
        ref=rules.unzip_ref.output,
        ref_idx=rules.index_ref.output,
        par=rules.download_PAR.output,
    output:
        **{
            k: res_dip_dir / f"hg2.{x}"
            for k, x in [
                ("pat_paf", "hap1.paf.gz"),
                ("mat_paf", "hap2.paf.gz"),
                ("vcf", "dip.vcf.gz"),
                ("bed", "dip.bed"),
                ("make", "dip.make"),
            ]
        },
    conda:
        "envs/dipcall.yml"
    params:
        prefix=lambda _, output: re.sub("\.dip.*", "", output.make),
    log:
        res_dip_dir / "dip.log",
    threads: 20
    resources:
        mem_mb=400000,
    shell:
        """
        run-dipcall \
            -z 200000,10000 \
            -t 5 \
            -x {input.par} \
            {params.prefix} \
            {input.ref} \
            {input.pat} \
            {input.mat} \
            > {output.make}
        make -j4 -f {output.make}
        """


rule all:
    input:
        rules.run_dipcall.output,
