from pathlib import Path
import json

BAMS = {
    "ont": "https://giab-data.s3.amazonaws.com/XY_evaluation/11_16_22_R1041_HG002_UL_Kit14_260_Guppy_6.3.8_sup.pass.lt100kb_sorted_haplotagged.bam",
    "hifi": "https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/HG002_NA24385_son/PacBio_CCS_15kb_20kb_chemistry2/GRCh38/HG002.SequelII.merged_15kb_20kb.pbmm2.GRCh38.haplotag.10x.bam",
}

IDS = list(map(str, [81, 82, 84, 85, 89]))

REGIONS = {
    "IGK": ("chr2", {"IGKC": 3514}),
    "TRG": ("chr7:0-100000000", {"TRGC1": 6966, "TRGGC2": 6967}),
    "TRB": ("chr7:100000000", {"TRBC1": 28639, "TRBC2": 28638}),
    "TRA": ("chr14:0-80000000", {"TRAC": 28755, "TRDC": 28526}),
    "IGH": (
        "chr14:80000000",
        {
            "IGHCA1": 3493,
            "IGHCA2": 3494,
            "IGHCD": 3495,
            "IGHCE": 3497,
            "IGHCEP1": 3498,
            "IGHCEP2": 3499,
            "IGHCG1": 3500,
            "IGHCG2": 3501,
            "IGHCG3": 3502,
            "IGHCG4": 3503,
            "IGHCGP": 3505,
            "IGHCM": 3507,
        },
    ),
    "IGL": (
        "chr22",
        {
            "IGLC1": 3537,
            "IGLC2": 3538,
            "IGLC3": 3539,
            "IGLC4": 3540,
            "IGLC5": 3541,
            "IGLC6": 3542,
            "IGLC7": 28834,
        },
    ),
}

# wildcard_constraints:
#     gene=f"({'|'.join(GENES)})",


IMGT_URL = "https://www.imgt.org/download/GENE-DB/IMGTGENEDB-ReferenceSequences.fasta-nt-WithoutGaps-F+ORF+allP"

ALIGN_PATH = Path("results") / "immuno_alignments" / "{bamid}"


rule intersect_bam:
    input:
        "static/immuno.bed",
    output:
        ALIGN_PATH / "raw.bam",
    params:
        url=lambda w: BAMS[w.bamid],
    conda:
        "envs/bedtools.yml"
    shell:
        """
        curl -LqSs --fail {params.url} | \
        bedtools intersect -abam stdin -b {input} -ubam -u > {output}
        """


rule download_constants:
    output:
        "resources/{locus}_constants.fa",
    conda:
        "envs/master.yml"
    params:
        tempfile=lambda w: f"/tmp/gene_{w.locus}.zip",
        gene_ids=lambda w: " ".join([str(i) for i in REGIONS[w.locus][1].values()]),
    shell:
        """
        datasets download gene gene-id \
        --no-progressbar --include gene --filename {params.tempfile} \
        {params.gene_ids} && \

        unzip -p {params.tempfile} ncbi_dataset/data/gene.fna | \
        seqkit grep -r -n -p 'NC_0000.*' | \
        sed 's/>[^ ]\+ \([^ ]\+\) .*/>\\1*01/' | \
        sed 's/>IGH/>IGHC/' \
        > {output} && \

        rm -rf {params.tempfile}
        """


rule download_imgt_goodies:
    output:
        "resources/imgt_human_vdj.fa",
    params:
        url=IMGT_URL,
    conda:
        "envs/master.yml"
    shell:
        """
        curl -SsLq --fail {params.url} | \
        seqkit grep -r -n -p '^.*\|Homo sapiens\|.*\|(V|D|J)-REGION\|.*' \
        > {output}
        """


rule split_igmt_goodies:
    input:
        rules.download_imgt_goodies.output,
    output:
        fa="results/igmt/{locus}_vdj.fa",
        header="results/igmt/{locus}_vdj_headers.fa",
    conda:
        "envs/biopython.yml"
    script:
        "scripts/split_igmt_db.py"


rule cat_vdj_constant:
    input:
        rules.split_igmt_goodies.output.fa,
        rules.download_constants.output,
    output:
        "results/igmt/{locus}_all.fa",
    shell:
        """
        cat {input} > {output}
        """


rule index_bam:
    input:
        rules.intersect_bam.output,
    output:
        rules.intersect_bam.output[0] + ".bai",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools index {input}
        """


rule split_bam:
    input:
        _idx=rules.index_bam.output,
        bam=rules.intersect_bam.output,
    output:
        ALIGN_PATH / "split" / "{locus}.fastq",
    params:
        region=lambda w: REGIONS[w.locus][0],
    conda:
        "envs/master.yml"
    log:
        "log/{bamid}/split/{locus}.log",
    shell:
        """
        samtools view -h {input.bam} {params.region} | \
        samtools fastq > {output} 2> {log}
        """


rule index_read_fastq:
    input:
        rules.split_bam.output,
    output:
        rules.split_bam.output[0] + ".fai",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools faidx {input}
        """


rule split_fastq:
    input:
        bam=rules.split_bam.output[0],
        alleles=rules.cat_vdj_constant.output[0],
        motifs="static/flank.fa",
    output:
        fasta=directory(ALIGN_PATH / "split" / "{locus}" / "fasta"),
        sam=directory(ALIGN_PATH / "split" / "{locus}" / "aligned"),
        allele_merged=ALIGN_PATH / "split" / "{locus}" / "allele_merged.bam",
        motif_merged=ALIGN_PATH / "split" / "{locus}" / "motif_merged.bam",
    log:
        allele_index="log/{bamid}/index/{locus}_allele.log",
        motif_index="log/{bamid}/index/{locus}_motif.log",
        allele_align="log/{bamid}/align/{locus}_allele.log",
        motif_align="log/{bamid}/align/{locus}_motif.log",
    threads: 10
    conda:
        "envs/master.yml"
    script:
        "scripts/split_fastq.py"


rule sort_alleles:
    input:
        rules.split_fastq.output.allele_merged,
    output:
        ALIGN_PATH / "split" / "{locus}" / "final" / "allele_sorted.bam",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools sort {input} | samtools view -q 10 -b > {output}
        """


rule index_alleles:
    input:
        rules.sort_alleles.output,
    output:
        rules.sort_alleles.output[0] + ".bai",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools index {input}
        """


rule cat_fasta:
    input:
        rules.split_fastq.output.fasta,
    output:
        ALIGN_PATH / "split" / "{locus}" / "all_reads.fa",
    shell:
        """
        cat {input}/*.fasta > {output}
        """


rule cat_alleles:
    input:
        rules.sort_alleles.output,
    output:
        sam=ALIGN_PATH / "split" / "{locus}" / "all_allele.sam",
        tags=ALIGN_PATH / "split" / "{locus}" / "all_allele.tags",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools view -F 0x4 -F 0x100 {input} | \
        grep -v "SA:" | \
        tee >(cut -f -11 > {output.sam}) | \
        cut -f 12- > {output.tags}
        """


rule cat_motifs:
    input:
        rules.split_fastq.output.motif_merged,
    output:
        ALIGN_PATH / "split" / "{locus}" / "all_motif.sam",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools view {input} | grep -v '^@' > {output}
        """


rule write_alleles_tsv:
    input:
        tags=rules.cat_alleles.output.tags,
        sam=rules.cat_alleles.output.sam,
        headers=rules.split_igmt_goodies.output.header,
        reads=rules.index_read_fastq.output,
        order="static/gene_order.tsv",
    output:
        tsv=ALIGN_PATH / "split" / "{locus}" / "final" / "allele.tsv",
        tiling=ALIGN_PATH / "split" / "{locus}" / "final" / "tiling.pdf",
        profile=ALIGN_PATH / "split" / "{locus}" / "final" / "profile.pdf",
    conda:
        "envs/tidy.yml"
    script:
        "scripts/process_allele.R"


rule write_rss_bed:
    input:
        rules.cat_motifs.output,
    output:
        ALIGN_PATH / "split" / "{locus}" / "final" / "rss.bed",
    conda:
        "envs/tidy.yml"
    script:
        "scripts/process_rss.R"


rule all:
    input:
        expand(
            rules.write_alleles_tsv.output
            + rules.write_rss_bed.output
            + rules.cat_fasta.output
            + rules.index_alleles.output
            + rules.index_read_fastq.output,
            locus=REGIONS,
            bamid=["ont"],
        ),
