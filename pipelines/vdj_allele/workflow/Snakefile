from pathlib import Path

IDS = list(map(str, [81, 82, 84, 85, 89]))

GENES = [
    "TCRV",
    "TCRJ",
    "BCRV",
    "BCRJ",
    "TCRD_plusHep",
    "BCRD_plusHep",
]


wildcard_constraints:
    gene=f"({'|'.join(GENES)})",


GENE_ALIGN_PATH = Path("results/vdj_mapping/{read_id}")


rule download_allele:
    output:
        "resources/alleles/{gene}.fa",
    shell:
        """
        curl -sSqL --fail \
        https://raw.githubusercontent.com/maojanlin/gAIRRsuite/72df9130ea87d6216b2ca76856ea6b8f8c81a29f/example/material/{wildcards.gene}_alleles_parsed.fasta \
        > {output}
        """


rule concat_alleles:
    input:
        expand(rules.download_allele.output, allow_missing=True, gene=GENES),
    output:
        "results/alleles/all_genes.fa",
    # cheap way of concating files and adding newlines if they don't exist
    shell:
        """
        grep -h "" {input} > {output}
        """


rule index_alleles:
    input:
        rules.concat_alleles.output,
    output:
        rules.concat_alleles.output[0] + ".fai",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools faidx {input} > {output}
        """


rule bwa_index_alleles:
    input:
        rules.concat_alleles.output,
    output:
        rules.concat_alleles.output[0] + ".bwt",
    log:
        "log/bwa_index.log",
    conda:
        "envs/master.yml"
    shell:
        """
        bwa index {input} 2> {log}
        """


rule align_reads:
    input:
        # dummy, not used
        _index=rules.bwa_index_alleles.output,
        allele=rules.concat_alleles.output,
        reads1="inputs/{read_id}_r1.fastq.gz",
        reads2="inputs/{read_id}_r2.fastq.gz",
    output:
        GENE_ALIGN_PATH / "mapped_reads.sam",
    conda:
        "envs/master.yml"
    threads: 16
    log:
        bwa="log/bwa_mem/{read_id}.log",
        sam="log/samview/{read_id}.log",
    shell:
        """
        bwa mem {input.allele} \
        -K 100000000 -Y -t {threads} \
        {input.reads1} {input.reads2} 2> {log.bwa} | \
        samtools view -h -F 0x4 > {output} 2> {log.sam}
        """


rule sort_alignments:
    input:
        rules.align_reads.output,
    output:
        GENE_ALIGN_PATH / "mapped_reads_sorted.bam",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools sort {input} -o {output}
        """


rule index_alignments:
    input:
        rules.sort_alignments.output,
    output:
        rules.sort_alignments.output[0] + ".bai",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools index {input}
        """


rule get_coverage:
    input:
        rules.sort_alignments.output,
    output:
        GENE_ALIGN_PATH / "coverage.txt",
    conda:
        "envs/master.yml"
    shell:
        """
        samtools coverage {input} -q 10 > {output}
        """


rule process_coverage:
    input:
        expand(rules.get_coverage.output, read_id=IDS),
    output:
        "results/coverage_plot.pdf",
    conda:
        "envs/tidy.yml"
    script:
        "scripts/plot.R"


rule all:
    input:
        rules.process_coverage.output,
        expand(rules.index_alignments.output, read_id=IDS),
