conf = {
    "hg2_07": {
        "asm_url": "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/scratch/HG002/assemblies/drafts/assembly.v0.7.fasta",
        "chrom_maps": {
            h: {
                **{f"chr{i}": f"chr{i}_{H}" for i in [*range(1, 23)]},
                **{"chrX": "chrX_MATERNAL", "chrY": "chrY_PATERNAL"},
            }
            for h, H in [("pat", "PATERNAL"), ("mat", "MATERNAL")]
        },
    },
    "hg2_08": {
        "asm_url": "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v0.8.fasta",
        "chrom_maps": {
            "pat": {
                "chr10": "chr10_PAT",
                "chr11": "chr11_PAT",
                "chr12": "chr12_PAT",
                "chr13": "chr13_PAT",
                "chr14": "chr14_PAT",
                "chr15": "chr15_PAT",
                "chr16": "chr16_PAT_1",
                "chr16": "chr16_PAT_2",
                "chr16": "chr16_PAT_3",
                "chr17": "chr17_PAT_1",
                "chr17": "chr17_PAT_2",
                "chr18": "chr18_PAT",
                "chr19": "chr19_PAT",
                "chr1": "chr1_PAT",
                "chr20": "chr20_PAT",
                "chr21": "chr21_PAT_1",
                "chr21": "chr21_PAT_2",
                "chr22": "chr22_PAT",
                "chr2": "chr2_PAT",
                "chr3": "chr3_PAT",
                "chr4": "chr4_PAT_1",
                "chr4": "chr4_PAT_2",
                "chr5": "chr5_PAT",
                "chr6": "chr6_PAT",
                "chr7": "chr7_PAT_1",
                "chr7": "chr7_PAT_2",
                "chr8": "chr8_PAT",
                "chr9": "chr9_PAT",
                "chrY": "chrY_PAT",
            },
            "mat": {
                "chr10": "chr10_MAT_1",
                "chr10": "chr10_MAT_2",
                "chr11": "chr11_MAT",
                "chr12": "chr12_MAT",
                "chr13": "chr13_MAT",
                "chr14": "chr14_MAT",
                "chr15": "chr15_MAT",
                "chr16": "chr16_MAT_1",
                "chr16": "chr16_MAT_2",
                "chr17": "chr17_MAT",
                "chr18": "chr18_MAT",
                "chr19": "chr19_MAT",
                "chr1": "chr1_MAT",
                "chr20": "chr20_MAT",
                "chr21": "chr21_MAT_1",
                "chr21": "chr21_MAT_2",
                "chr22": "chr22_MAT",
                "chr2": "chr2_MAT",
                "chr3": "chr3_MAT",
                "chr4": "chr4_MAT",
                "chr5": "chr5_MAT",
                "chr6": "chr6_MAT",
                "chr7": "chr7_MAT",
                "chr8": "chr8_MAT",
                "chr9": "chr9_MAT_1",
                "chr9": "chr9_MAT_2",
                "chrX": "chrX_MAT_1",
                "chrX": "chrX_MAT_2",
            },
        },
    },
}


rule build_chroms_mapper:
    output:
        "resources/{ref}/chrom_mapper_{hap}.txt",
    params:
        stream=lambda w: "\n".join(
            f"{k},{v}" for k, v in conf[w.ref]["chrom_maps"][w.hap].items()
        ),
    shell:
        """
        echo -e '{params.stream}' > {output}
        """


rule download_asm:
    output:
        "resources/refs/{ref}.fa",
    params:
        url=lambda w: conf[w.ref]["asm_url"],
    shell:
        """
        curl -qSs --fail -L {params.url} > {output}
        """


rule download_chm13:
    output:
        "resources/chm13.fa",
    params:
        url="https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/analysis_set/chm13v2.0.fa.gz",
    shell:
        """
        curl -qSs --fail -L {params.url} | gunzip -c > {output}
        """


use rule download_chm13 as download_chm_gff with:
    output:
        "resources/chm13.gff",
    params:
        url="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_009914755.1_T2T-CHM13v2.0/GCF_009914755.1_T2T-CHM13v2.0_genomic.gff.gz",


rule filter_asm_haps:
    input:
        rules.download_asm.output,
    output:
        "results/refs/{ref}_{hap}.fa",
    params:
        chroms=lambda w: " ".join(list(conf[w.ref]["chrom_maps"][w.hap].values())),
    conda:
        "envs/master.yml"
    shell:
        """
        samtools faidx {input} {params.chroms} > {output}
        """


rule filter_vdj_genes:
    input:
        rules.download_chm_gff.output,
    output:
        "results/chm13_immuno.gff",
    shell:
        """
        grep -E 'ID=gene-(IG(H|K|L|D)|TR(A|B|G|D))' {input} | \
        sed 's/^NC_060946.1/chr22/' | \
        sed 's/^NC_060938.1/chr14/' | \
        sed 's/^NC_060931.1/chr7/' | \
        sed 's/^NC_060926.1/chr2/' | \
        grep '^chr' | \
        grep -E 'immunoglobulin|T cell receptor' | \
        grep -vE 'RNA|polypeptide|deleting' > \
        {output} 
        """


rule lift_vdj_genes:
    input:
        chroms=rules.build_chroms_mapper.output,
        asm_ref=rules.filter_asm_haps.output,
        chm13_ref=rules.download_chm13.output,
        genes=rules.filter_vdj_genes.output,
    output:
        mapped="results/liftoff/{ref}/mapped_{hap}.gff",
        unmapped="results/liftoff/{ref}/unmapped_{hap}.txt",
        intermediate=directory("results/liftoff/{ref}/intermediate_{hap}"),
    log:
        "results/liftoff/{ref}/lift_{hap}.log",
    conda:
        "envs/master.yml"
    shell:
        """
        liftoff -f static/features.txt \
        -chroms {input.chroms} \
        -g {input.genes} \
        -o {output.mapped} \
        -u {output.unmapped} \
        -dir {output.intermediate} \
        {input.asm_ref} {input.chm13_ref} > {log} 2>&1
        """


rule process_lifted_genes:
    input:
        **{
            f"mapped_{h}": expand(
                rules.lift_vdj_genes.output.mapped, allow_missing=True, hap=h
            )
            for h in ["pat", "mat"]
        },
        **{
            f"unmapped_{h}": expand(
                rules.lift_vdj_genes.output.unmapped, allow_missing=True, hap=h
            )
            for h in ["pat", "mat"]
        },
        order="static/gene_order.tsv",
    output:
        loci="results/processed/{ref}_locus.tsv",
        genes="results/processed/{ref}_genes.tsv",
    conda:
        "envs/master.yml"
    script:
        "scripts/process.R"


rule make_wizzy_plots:
    input:
        loci=rules.process_lifted_genes.output.loci,
        genes=rules.process_lifted_genes.output.genes,
    output:
        unmapped="results/plots/{ref}/unmapped.pdf",
        mapped="results/plots/{ref}/mapped.pdf",
    conda:
        "envs/master.yml"
    script:
        "scripts/plot.R"


rule all:
    input:
        expand(rules.make_wizzy_plots.output, ref=list(conf)),
